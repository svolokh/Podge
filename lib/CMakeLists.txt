include(GNUInstallDirs)

function(podge_check_submodule name path)
	if(NOT EXISTS ${path})
		message(FATAL_ERROR "missing submodule '${name}', please run `git submodule update --init --recursive`")
	endif()
endfunction()

function(patch_sdl2)
	function(check_result res)
		if(NOT ${res} STREQUAL 0)
			message(FATAL_ERROR "failed to execute command")
		endif()
	endfunction()
	if(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/patched_flag)
		return()
	endif()
	set(_sdl2_dir ${CMAKE_CURRENT_SOURCE_DIR}/SDL2)
	set(_sdl2_podge_dir ${CMAKE_CURRENT_SOURCE_DIR}/SDL2_podge)
	set(_patches 
		CMakeLists.txt
		include/SDL_config_iphoneos.h)
	foreach(_patch ${_patches})
		execute_process(COMMAND git checkout ${_patch} WORKING_DIRECTORY ${_sdl2_dir} RESULT_VARIABLE _res)
		check_result(${_res})
	endforeach()
	foreach(_patch ${_patches})
		execute_process(COMMAND git apply WORKING_DIRECTORY ${_sdl2_dir} INPUT_FILE ${_sdl2_podge_dir}/${_patch}.patch RESULT_VARIABLE _res)
		check_result(${_res})
	endforeach()
	file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/patched_flag "")
endfunction()

if(NOT PODGE_LIBRARY)
	set(SDL_SHARED_ENABLED_BY_DEFAULT OFF CACHE BOOL "" FORCE)
	set(SDL_STATIC_PIC ON)
	if(IOS)
		set(SDL_SKIP_CONFIGURE ON CACHE BOOL "" FORCE) # we will copy in SDL_config_iphoneos.h ourselves
	endif()
	podge_check_submodule(nuklear ${CMAKE_CURRENT_SOURCE_DIR}/nuklear/nuklear.h)
	podge_check_submodule(SDL2 ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/CMakeLists.txt)
	patch_sdl2()
	add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/SDL2)
	if(IOS)
		file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/include/SDL_config_iphoneos.h DESTINATION ${SDL2_BINARY_DIR}/include)
		file(RENAME ${SDL2_BINARY_DIR}/include/SDL_config_iphoneos.h ${SDL2_BINARY_DIR}/include/SDL_config.h)
	endif()
	file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/SDL2/include DESTINATION ${PODGE_HEADERS_MIRROR_DIR})
	file(RENAME ${PODGE_HEADERS_MIRROR_DIR}/include ${PODGE_HEADERS_MIRROR_DIR}/SDL2)
	file(COPY ${SDL2_BINARY_DIR}/include/SDL_config.h DESTINATION ${PODGE_HEADERS_MIRROR_DIR}/include/SDL2)
endif()

add_subdirectory(pugixml)

set(BOX2D_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(BOX2D_BUILD_UNITTESTS OFF CACHE BOOL "" FORCE)
set(BOX2D_INSTALL ON CACHE BOOL "" FORCE)
add_subdirectory(liquidfun/Box2D)

get_property(box2d_link_libs TARGET Box2D PROPERTY LINK_LIBRARIES)
list(FIND box2d_link_libs rt box2d_rt_idx)
if(NOT box2d_rt_idx EQUAL -1)
	list(REMOVE_AT box2d_link_libs ${box2d_rt_idx})
endif()
set_property(TARGET Box2D PROPERTY LINK_LIBRARIES ${box2d_link_libs})

get_property(box2d_link_libs TARGET Box2D PROPERTY INTERFACE_LINK_LIBRARIES)
list(FIND box2d_link_libs rt box2d_rt_idx)
if(NOT box2d_rt_idx EQUAL -1)
	list(REMOVE_AT box2d_link_libs ${box2d_rt_idx})
endif()
set_property(TARGET Box2D PROPERTY INTERFACE_LINK_LIBRARIES ${box2d_link_libs})

# nanovg
set(NANOVG_DIR ${CMAKE_CURRENT_SOURCE_DIR}/nanovg)
add_library(nanovg STATIC
	${NANOVG_DIR}/src/nanovg.c)
target_compile_definitions(nanovg PRIVATE $<$<CONFIG:Debug>:DEBUG> $<$<CONFIG:Release>:NDEBUG>)
target_include_directories(nanovg PRIVATE ${NANOVG_DIR}/src)
install(FILES ${NANOVG_DIR}/src/nanovg.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
install(TARGETS nanovg ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})

# nlohmann json
set(JSON_DIR ${CMAKE_CURRENT_SOURCE_DIR}/json)
install(FILES ${JSON_DIR}/single_include/json.hpp DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
